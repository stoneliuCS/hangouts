// Code generated by ogen, DO NOT EDIT.

package api

import (
	"fmt"
	"io"

	"github.com/go-faster/errors"
)

func (s *ErrorSchemaStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

// Error Schema.
// Ref: #/components/schemas/ErrorSchema
type ErrorSchema struct {
	Error string `json:"error"`
}

// GetError returns the value of Error.
func (s *ErrorSchema) GetError() string {
	return s.Error
}

// SetError sets the value of Error.
func (s *ErrorSchema) SetError(val string) {
	s.Error = val
}

// ErrorSchemaStatusCode wraps ErrorSchema with StatusCode.
type ErrorSchemaStatusCode struct {
	StatusCode int
	Response   ErrorSchema
}

// GetStatusCode returns the value of StatusCode.
func (s *ErrorSchemaStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ErrorSchemaStatusCode) GetResponse() ErrorSchema {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ErrorSchemaStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ErrorSchemaStatusCode) SetResponse(val ErrorSchema) {
	s.Response = val
}

type GetOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s GetOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

type HealthcheckGetOK struct {
	Message OptHealthcheckGetOKMessage `json:"message"`
}

// GetMessage returns the value of Message.
func (s *HealthcheckGetOK) GetMessage() OptHealthcheckGetOKMessage {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *HealthcheckGetOK) SetMessage(val OptHealthcheckGetOKMessage) {
	s.Message = val
}

type HealthcheckGetOKMessage string

const (
	HealthcheckGetOKMessageOK HealthcheckGetOKMessage = "OK"
)

// AllValues returns all HealthcheckGetOKMessage values.
func (HealthcheckGetOKMessage) AllValues() []HealthcheckGetOKMessage {
	return []HealthcheckGetOKMessage{
		HealthcheckGetOKMessageOK,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s HealthcheckGetOKMessage) MarshalText() ([]byte, error) {
	switch s {
	case HealthcheckGetOKMessageOK:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *HealthcheckGetOKMessage) UnmarshalText(data []byte) error {
	switch HealthcheckGetOKMessage(data) {
	case HealthcheckGetOKMessageOK:
		*s = HealthcheckGetOKMessageOK
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// NewOptHealthcheckGetOKMessage returns new OptHealthcheckGetOKMessage with value set to v.
func NewOptHealthcheckGetOKMessage(v HealthcheckGetOKMessage) OptHealthcheckGetOKMessage {
	return OptHealthcheckGetOKMessage{
		Value: v,
		Set:   true,
	}
}

// OptHealthcheckGetOKMessage is optional HealthcheckGetOKMessage.
type OptHealthcheckGetOKMessage struct {
	Value HealthcheckGetOKMessage
	Set   bool
}

// IsSet returns true if OptHealthcheckGetOKMessage was set.
func (o OptHealthcheckGetOKMessage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptHealthcheckGetOKMessage) Reset() {
	var v HealthcheckGetOKMessage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptHealthcheckGetOKMessage) SetTo(v HealthcheckGetOKMessage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptHealthcheckGetOKMessage) Get() (v HealthcheckGetOKMessage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptHealthcheckGetOKMessage) Or(d HealthcheckGetOKMessage) HealthcheckGetOKMessage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}
